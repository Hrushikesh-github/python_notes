str

-> Data type for strings in python
-> Sequence of Unicode code points #code points is like characters(not strictly 
-> immutable
'This is a string'

>>> m='This is\n a new line' # \n takes to newline 
>>> print(m)
This is
 a new line

>>> type(496)==type(str(496))
False  str(496) gives '496'

bytes
-> Data type for sequence of bytes
-> Raw binary data
-> Fixed-width single-byte encodings
>>> d=b'data'
>>> print(d)
b'data'
>>> print(d[0])
100
>>> print(d[1])
97
>>> print(d[3])
97
>>> d.decode('utf8')
'data'

list
-> Sequences of data
-> Mutable
>>> [1,9,8]
[1, 9, 8]
>>> a=["apple","bear"]
>>> a[1]
'bear'
>>> a[1]=10
>>> a
['apple', 10]
>>> list("characters")
['c', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 's']
>>> c=['bear',
... 'giraffe',
... 'elephant']
>>> c
['bear', 'giraffe', 'elephant']

dictionary

>>> d={'me':9706,'mom':9291}
>>> d['me']
9706
>>> d['me']=9490
>>> d
{'me': 9490, 'mom': 9291}
#looping over dict gives key
for name in d:
	print(name,d[name])

print(__name__)-> Specifically named variable aloowing us to detect whether 
a module is run as a script or imported into a module, gives __main__

>>> m=[9,15,24]
>>> def modify(k):
...     k.append(39)
...     print("k=",k)
... 
>>> modify(m)
k= [9, 15, 24, 39]
>>> m
[9, 15, 24, 39]

>>> f=[14,23,25]
>>> def replace(g):
...     g=[17,28,22]
...     print("g=",g)
... 
>>> replace(f)
g= [17, 28, 22]
>>> f
[14, 23, 25]
>>> def replace_contents(c):
...     c[0]=14
...     c[1]=19
...     c[2]=31
...     print("c=",c)
... 
>>> f=[11,42,25]
>>> replace_contents(f)
c= [14, 19, 31]
>>> f
[14, 19, 31]

f->[OBJECT]	<----
|   		  |
some_function(g)->g 

# references to objects are copied not the objects themselves

print(f'Math constants: pi={math.pi:.3f}, e={math.e:.3f})

>>> s=[3,123,45,503]
>>> s[:]
[3, 123, 45, 503]
>>> t=s
>>> t is s
True
>>> r=s[:]
>>> r is s
False
>>> r == s
True
Or Simply use u =s.copy() 
Or v=list(s)

>>> words="I give as good as I get".split()
>>> words
['I', 'give', 'as', 'good', 'as', 'I', 'get']
>>> [len(word) for word in words]
[1, 4, 2, 4, 2, 1, 3]

[expr(item) for item in iterable] -> general form of list comprehension

{
	key_expr(item):value_expr(item)
	for item in iterable
}
